#!/usr/bin/env bash
set -o errexit -o nounset

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
readonly APP=xdgize
readonly VERSION="0.2"
if [[ -z "${1:-}" ]]; then
  printf "%s %s\n" "$APP" "$VERSION"
  printf "usage: %s COMMAND\n" "${BASH_SOURCE[0]}"
  exit 0
fi

readonly CMD="$1"
if ! command -v "$CMD" &>/dev/null; then
  printf "%s: not found\n" "$CMD"
  exit 1
fi

# not recursive
[[ "$CMD" == "$APP" ]] && exit 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
readonly HERE="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
readonly XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
readonly XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
readonly XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# templates
# shellcheck disable=SC2016,SC2034
{
  readonly XDG_CACHE_HOME_T='"${XDG_CACHE_HOME:-$HOME/.cache}"'
  readonly XDG_CONFIG_HOME_T='"${XDG_CONFIG_HOME:-$HOME/.config}"'
  readonly XDG_DATA_HOME_T='"${XDG_DATA_HOME:-$HOME/.local/share}"'
}

declare -A env
declare -a pre_args=() pre_exec=() post_args=() rules_dirs=()
declare -i out_file=1 quiet=0 verbose=1
dest="$XDG_DATA_HOME"/"$APP"/bin
header="$(printf "#!/usr/bin/env bash\nset -euo pipefail")"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
add_rules_dir() {
  [[ ! -d "$1" ]] && return
  rules_dirs+=("$1")
}

msg() {
  ((quiet)) && return
  printf "==> %s\n" "$*" >&2
}

source_() {
  [[ ! -r "$1" ]] && return
  msg source "'$1'"
  # shellcheck source=/dev/null
  source "$1"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source_ /etc/"$APP"/config
add_rules_dir /etc/"$APP"/rules.d
add_rules_dir "$HERE"/rules.d

readonly CONFIG_DIR="$XDG_CONFIG_HOME"/"$APP"
source_ "$CONFIG_DIR"/config
add_rules_dir "$CONFIG_DIR"/rules.d

# remove $dest from $PATH (for `command -v`)
PATH=:$PATH:
PATH=${PATH//:$dest:/:}
PATH=${PATH#:}
PATH=${PATH%:}

for d in "${rules_dirs[@]}"; do
  source_ "$d"/"$CMD"
done

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
script_lines() {

  # header includes shebang, shell opts [, other]
  printf "%s\n" "$header"

  # environment variables
  local k v
  for k in "${!env[@]}"; do
    v="${env[$k]}"
    printf "[[ -z \"\${%s:-}\" ]] && %s=%s && export %s\n" "$k" "$k" "$v" "$k"
  done

  # any other needed lines
  [[ -n "${pre_exec[*]:-}" ]] && printf "%s\n" "${pre_exec[@]}"

  # exec
  local -a line=("exec -a '$CMD' '$(command -v "$CMD")'")
  [[ -n "${pre_args[*]:-}" ]] && line+=("${pre_args[@]}")
  line+=('"$@"')
  [[ -n "${post_args[*]:-}" ]] && line+=("${post_args[@]}")
  printf "%s\n" "${line[*]}"

}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if ((out_file)) && [[ ! -d "$dest" ]]; then
  msg mkdir "'$dest'"
  mkdir -p "$dest"
fi

f="$dest"/"$CMD"
((out_file)) && msg generating script "'$f'"
if ((out_file)) && ((verbose)); then
  script_lines | tee "$f"
elif ((out_file)); then
  script_lines >"$f"
elif ((verbose)); then
  script_lines
fi
if ((out_file)); then
  chmod +x "$f"
fi
